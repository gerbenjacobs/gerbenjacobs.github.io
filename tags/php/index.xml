<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Php on Gerben Jacobs</title><link>https://blog.gerbenjacobs.nl/tags/php/</link><description>Recent content in Php on Gerben Jacobs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 19 Apr 2013 12:00:00 +0000</lastBuildDate><atom:link href="https://blog.gerbenjacobs.nl/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>Quickly create an empty stdClass object in PHP</title><link>https://blog.gerbenjacobs.nl/quickly-create-an-empty-stdclass-object-in-php/</link><pubDate>Fri, 19 Apr 2013 12:00:00 +0000</pubDate><guid>https://blog.gerbenjacobs.nl/quickly-create-an-empty-stdclass-object-in-php/</guid><description>&lt;p>
 I was working on a Laravel project and had to work with a &lt;a title="Eloquent ORM docs" href="https://laravel.com/docs/database/eloquent" >Eloquent ORM&lt;/a> object;
 I then needed to create an empty stdClass object.
&lt;/p>

&lt;p>
 There's a chance that a person is not known and being lazy I wanted to fill the form anyway with my Person object, so I needed a mockup of that object.
&lt;/p>

&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$person &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">object&lt;/span>) &lt;span style="color:#a6e22e">array_fill_keys&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">array&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;firstname&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;lastname&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;email&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;photo&amp;#39;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;p>
 I'd say &lt;a href="https://gist.github.com/gerbenjacobs/5525165" title="Create an empty stdClass object Gist" >this solution&lt;/a> is quick and dirty.. but frankly,
 it's not that dirty at all!
&lt;/p></description></item><item><title>Get IP range by CIDR notation</title><link>https://blog.gerbenjacobs.nl/get-ip-range-by-cidr-notation/</link><pubDate>Wed, 21 Nov 2012 12:00:00 +0000</pubDate><guid>https://blog.gerbenjacobs.nl/get-ip-range-by-cidr-notation/</guid><description>&lt;p>
 I wanted to get the IPv4 range of a WHOIS record provided by
 &lt;a title="Latin America and Caribbean Internet Address Registry" href="http://www.lacnic.net/en/web/lacnic/inicio" >LACNIC&lt;/a>,
 because unlike other &lt;a title="Regional Internet Registries" href="https://en.wikipedia.org/wiki/Regional_Internet_registry" >RIRs&lt;/a>
 they don't supply you with the range, but with just
 a &lt;a title="Classless Inter-Domain Routing on Wikipedia" href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing" >CIDR notation&lt;/a>.
&lt;/p>

&lt;p>
 To make matters worse, they give 'incomplete' net numbers. The only working "CIDR to IP range" function I could find didn't accept it, so I had to sprinkle some &lt;em>magic&lt;/em>.
&lt;/p></description></item><item><title>Perfect separator for Shoutcast 7.html file</title><link>https://blog.gerbenjacobs.nl/perfect-separator-for-shoutcast-7.html-file/</link><pubDate>Sun, 08 Apr 2012 12:00:00 +0000</pubDate><guid>https://blog.gerbenjacobs.nl/perfect-separator-for-shoutcast-7.html-file/</guid><description>&lt;p>
 To go along nicely with &lt;a href="{% post_url 2012-04-07-add-ip-address-to-shoutcast-rip %}">my previous Shoutcast tip&lt;/a>,
 here is a trick to separate the data in the Shoutcast 7.html for displaying.
&lt;/p>

&lt;p>
 If you, like me, use the &lt;em>Shoutcast 7.html trick&lt;/em> to get some quick stats about your stream broadcast
 but are getting some inconsistencies with parsing the comma-separated input you get, try this:
&lt;/p>

&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> $data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">preg_split&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/[,]+/&amp;#34;&lt;/span>, $string, &lt;span style="color:#ae81ff">7&lt;/span>); &lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;p>
 A possible outcome would be this:
&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Array&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">2&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">3&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">4&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">5&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">192&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [&lt;span style="color:#ae81ff">6&lt;/span>] &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Woe, Is Me - Hell, or High Water&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>

&lt;p>
 If you were to &lt;code>explode()&lt;/code> this string, you'd get the artist in 2 nodes and with this song title you'd get that one in 2 nodes as well.
&lt;/p></description></item><item><title>How to programmatically add an IP address to a Shoutcast Reserved IP list in PHP</title><link>https://blog.gerbenjacobs.nl/how-to-programmatically-add-an-ip-address-to-a-shoutcast-reserved-ip-list-in-php/</link><pubDate>Sat, 07 Apr 2012 12:00:00 +0000</pubDate><guid>https://blog.gerbenjacobs.nl/how-to-programmatically-add-an-ip-address-to-a-shoutcast-reserved-ip-list-in-php/</guid><description>&lt;p>
 Pretty semantic title, huh? But that's basically what this is all about.
&lt;/p>

&lt;figure class="figure">
 
 &lt;img class="figure-img img-fluid rounded" src=https://blog.gerbenjacobs.nl/img/blog/2012/shoutcast.gif alt=Shoutcast&amp;#32;logo>
 

 &lt;figcaption class="figure-caption">Shoutcast logo&lt;/figcaption>
&lt;/figure>

&lt;p>
 If you have a Shoutcast host that is set to private, only people whose IP address in the RIP list (Reserved IP) can access your stream.
 &lt;br>A lot of free Shoutcast server providers do this, to make it a bit less profitable to free ride their services.
&lt;/p>

&lt;p>
 Let's have a quick look at the code and then analyze it to understand what it's doing.
&lt;/p></description></item><item><title>array_push_insert: Push new value into array with PHP</title><link>https://blog.gerbenjacobs.nl/array_push_insert-push-new-value-into-array-with-php/</link><pubDate>Thu, 19 May 2011 12:00:00 +0000</pubDate><guid>https://blog.gerbenjacobs.nl/array_push_insert-push-new-value-into-array-with-php/</guid><description>&lt;div class="alert alert-primary" role="alert">
 This blogpost is for historical purposes.
 There is a better way with &lt;a
 href="https://www.php.net/manual/en/function.array-splice.php">array_splice&lt;/a>.
&lt;/div>

&lt;p>
 At work today, my colleague needed to add, or rather 'insert', a value into an existing array &lt;em>AND&lt;/em> on a
 specific index.
 This because we fed it into a JS table sorter, once we pulled it through &lt;code>json_encode()&lt;/code>.
&lt;/p>

&lt;p>So what we really required: &lt;strong>&lt;code>array_push_insert&lt;/code>&lt;/strong>&lt;/p>

&lt;p>
 We couldn't find any existing &lt;a href="https://www.php.net/manual/en/ref.array.php">Array function&lt;/a> at php.net,
 so
 I decided to make my own version.
&lt;/p></description></item></channel></rss>