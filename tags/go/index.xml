<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Gerben Jacobs</title><link>https://blog.gerbenjacobs.nl/tags/go/</link><description>Recent content in Go on Gerben Jacobs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 17 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gerbenjacobs.nl/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>svc; an opinionated Go service framework</title><link>https://blog.gerbenjacobs.nl/svc-an-opinionated-go-service-framework/</link><pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.gerbenjacobs.nl/svc-an-opinionated-go-service-framework/</guid><description>&lt;p>I have been writing Go (or Golang) for about 6 years now. In that time I&amp;rsquo;ve seen quite a few different ways
on how to organize a Go project. During my time at &lt;a href="https://www.messagebird.com/">MessageBird&lt;/a> I got introduced to a nice layered approach.
I&amp;rsquo;ve taken those lessons and applied them to something that feels right for me; &lt;a href="https://github.com/gerbenjacobs/svc">github.com/gerbenjacobs/svc&lt;/a>&lt;/p>
&lt;h2 id="svc">svc&lt;/h2>
&lt;p>svc is not an actual framework, but more a convention for creating microservices.&lt;/p>
&lt;p>The core of svc is centered around 3 layers: &lt;strong>handlers&lt;/strong>, &lt;strong>services&lt;/strong> and &lt;strong>storages&lt;/strong>.
Together with the &lt;code>cmd&lt;/code> folder they are responsible for organizing your code into a clean and well-organized structure.&lt;/p></description></item></channel></rss>